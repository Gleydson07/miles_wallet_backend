generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id                        String                @id @default(uuid())
  name                      String                @db.VarChar(255)
  email                     String                @unique
  password                  String                @db.VarChar(128)
  disabled                  Boolean               @default(false)
  createdAt                 DateTime              @default(now())                 @map("created_at")
  updatedAt                 DateTime              @updatedAt                      @map("updated_at")

  accounts                  Account[]

  @@map("users")
}

model Airline {
  id                        String                @id @default(uuid())
  name                      String                @unique @db.VarChar(80)
  website                   String?               @db.VarChar(255)
  disabled                  Boolean               @default(false)
  createdAt                 DateTime              @default(now())                 @map("created_at")
  updatedAt                 DateTime              @updatedAt                      @map("updated_at")

  airlineClub               AirlineClub?

  @@map("airlines")
}

model AirlineClub {
  id                        String                @id @default(uuid())
  name                      String                @db.VarChar(80)
  website                   String?               @db.VarChar(255)
  phone                     String?               @db.VarChar(30)
  disabled                  Boolean               @default(false)
  createdAt                 DateTime              @default(now())                 @map("created_at")
  updatedAt                 DateTime              @updatedAt                      @map("updated_at")

  airline                   Airline               @relation(fields: [airlineId], references: [id])
  airlineId                 String                @unique                         @map("airline_id")

  wallet                    Wallet[]

  @@map("airline_clubs")
}

model BankClub {
  id                        String                @id @default(uuid())
  name                      String                @db.VarChar(80)
  website                   String?               @db.VarChar(255)
  phone                     String?               @db.VarChar(30)
  disabled                  Boolean               @default(false)
  createdAt                 DateTime              @default(now())                   @map("created_at")
  updatedAt                 DateTime              @updatedAt                        @map("updated_at")

  wallet                    Wallet[]

  @@map("bank_clubs")
}

model Account {
  id                        String                @id @default(uuid())
  name                      String                @db.VarChar(80)
  description               String?               @db.VarChar(255)
  createdAt                 DateTime              @default(now())                   @map("created_at")
  updatedAt                 DateTime              @updatedAt                        @map("updated_at")

  user                      User                  @relation(fields: [userId], references: [id])
  userId                    String                @map("user_id")

  wallet                    Wallet[]

  @@map("accounts")

  @@unique([userId, name])
} 

model WalletType {
  id                        String                @id @default(uuid())
  name                      String                @unique @db.VarChar(80)
  description               String?               @db.VarChar(255)
  disabled                  Boolean               @default(false)
  createdAt                 DateTime              @default(now())                    @map("created_at")
  updatedAt                 DateTime              @updatedAt                         @map("updated_at")

  wallet                    Wallet[]

  @@map("wallet_types")
}

model Wallet {
  id                        String                @id @default(uuid())
  name                      String                @db.VarChar(80)
  description               String?               @db.VarChar(255)
  balance                   Decimal?              @default(0)                         @map("initial_balance")
  createdAt                 DateTime              @default(now())                     @map("created_at")
  updatedAt                 DateTime              @updatedAt                          @map("updated_at")

  walletType                WalletType            @relation(fields: [walletTypeId], references: [id])
  walletTypeId              String                @map("wallet_type_id")

  account                   Account               @relation(fields: [accountId], references: [id])
  accountId                 String                @map("account_id")

  bankClub                  BankClub?             @relation(fields: [bankClubId], references: [id])
  bankClubId                String?               @map("bank_club_id")

  airlineClub               AirlineClub?          @relation(fields: [airlineClubId], references: [id])
  airlineClubId             String?               @map("airline_club_id")

  TransactionOrigin         Transaction[]         @relation("TransactionOrigin")
  TransactionDestination    Transaction[]         @relation("TransactionDestination")

  @@map("wallets")
}

model Transaction {
  id                        String                @id @default(uuid())
  description               String?               @db.VarChar(255)
  amountOrigin              Decimal               @map("amount_origin")
  amountDestination         Decimal               @map("amount_destination")
  value                     Decimal
  createdAt                 DateTime              @default(now())                      @map("created_at")
  updatedAt                 DateTime              @updatedAt                           @map("updated_at")

  walletOrigin              Wallet                @relation("TransactionOrigin", fields: [walletOriginId], references: [id])
  walletOriginId            String                @map("wallet_origin_id")

  walletDestination         Wallet                @relation("TransactionDestination", fields: [walletDestinationId], references: [id])
  walletDestinationId       String                @map("wallet_destination_id")

  @@map("transactions")
}

// enum RegistrationType {
//   RG
//   CPF
//   CNH
// }
